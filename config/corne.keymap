/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF_LAYER  0
#define KEYPAD     1
#define SYMBOL     2
#define EXTEND     3
#define MODS_LEFT  4
#define MODS_RIGHT 5
#define MOD        6

/ {
    behaviors {
      hm: balanced_homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MOD";
          #binding-cells = <2>;
          flavor = "balanced";
          tapping-term-ms = <200>;    // <---[[moderate duration]]
          quick-tap-ms = <150>;
          bindings = <&kp>, <&kp>;
      };

      hl: balanced_momentary_layer_tap {
          compatible = "zmk,behavior-hold-tap";
          label = "BALANCED_MOMENTARY_LAYER_TAP";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick-tap-ms = <150>;
          flavor = "balanced";
          bindings = <&mo>, <&kp>;
      };

      skq: sticky_key_with_quick_release {
	 compatible = "zmk,behavior-sticky-key";
         label = "STICKY_KEY_QUICK_RELEASE";
         #binding-cells = <1>;
         bindings = <&kp>;
         release-after-ms = <1000>;
         quick-release;
      };

      shl: balanced_momentary_layer_tap_sticky {
          compatible = "zmk,behavior-hold-tap";
          label = "MOMENTARY_LAYER_TAP_STICKY";
          #binding-cells = <2>;
          tapping-term-ms = <150>;
          quick-tap-ms = <125>;
          flavor = "balanced";
          bindings = <&mo>, <&skq>;
      };

      mlt: my_layer_tap {
          compatible = "zmk,behavior-hold-tap";
          label = "mlt";
          #binding-cells = <2>;
          flavor = "hold-preferred";
          tapping-term-ms = <300>;
          bindings = <&mo>, <&kp>;
      };

      conditional_layers {
          compatible = "zmk,conditional-layers";
          right_mods_with_symbol {
            if-layers = <SYMBOL>;
            then-layer = <MODS_RIGHT>;
          };
          left_mods_with_keypad {
            if-layers = <KEYPAD>;
            then-layer = <MODS_LEFT>;
          };
          left_mods_with_extend {
            if-layers = <EXTEND>;
            then-layer = <MODS_LEFT>;
          };
      };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &none &kp SQT       &kp COMMA  &kp DOT     &kp P       &kp Y   &kp F &kp G       &kp C       &kp R      &kp L      &none
   &none &kp A         &kp O      &kp E       &kp U       &kp I   &kp D &kp H       &kp T       &kp N      &kp S      &none
   &none &hm LALT SEMI &hm LGUI Q &hm LSHFT J &hm LCTRL K &kp X   &kp B &hm RCTRL M &hm RSHFT W &hm RGUI V &hm RALT Z &none
                       &none  &hl KEYPAD SPACE  &mlt EXTEND ESC   &none  &shl SYMBOL LSHFT  &none
                        >;
                };
                keypad {
                        bindings = <
   &trans &trans &trans &trans &trans     &trans   &trans &kp N7 &kp N8 &kp N9 &trans     &trans
   &trans &trans &trans &kp TAB &kp ENTER &trans   &trans &kp N4 &kp N5 &kp N6 &kp KP_DOT &trans
   &trans &trans &trans &trans &trans     &trans   &trans &kp N1 &kp N2 &kp N3 &trans     &trans
                        &trans &trans     &trans   &trans &kp N0 &trans
                        >;
                };
                symbol {
                        bindings = <
   &trans &kp EXCL  &kp AT    &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp UNDER    &kp QMARK &kp ASTRK    &kp AMPS    &trans
   &trans &kp GRAVE &kp TILDE &kp LBRC &kp LPAR &kp LBKT    &kp BSLH  &kp KP_MINUS &kp FSLH  &kp KP_EQUAL &kp KP_PLUS &trans
   &trans &kp LT    &kp GT    &kp RBRC &kp RPAR &kp RBKT    &kp PIPE  &kp KP_MINUS &kp FSLH  &kp KP_EQUAL &kp KP_PLUS &trans
                              &trans   &trans   &trans      &trans    &trans       &trans
                        >;
                };
                extend {
                        bindings = <
   &trans &kp C_PLAY_PAUSE &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT    &kp HOME    &kp PG_DN &kp PG_UP &kp END   &trans   &trans
   &trans &kp ESC          &trans     &trans       &kp TAB      &caps_word    &kp LEFT    &kp DOWN  &kp UP    &kp RIGHT &kp BKSP &trans
   &trans &kp ESC          &trans     &trans       &kp TAB      &key_repeat   &key_repeat &kp ENTER &trans    &trans    &kp DEL  &trans
                                      &trans       &trans       &trans        &trans      &kp ENTER &trans
                        >;
                };
                mods_left {
                        bindings = <
   &trans &trans   &trans   &trans    &trans    &trans   &trans &trans &trans &trans &trans &trans
   &trans &trans   &trans   &trans    &trans    &trans   &trans &trans &trans &trans &trans &trans
   &trans &sk LALT &sk LGUI &sk LSHFT &sk LCTRL &trans   &trans &trans &trans &trans &trans &trans
                            &trans    &trans    &trans   &trans &trans &trans
                        >;
                };
                mods_right {
                        bindings = <
   &trans &trans &trans &trans &trans &trans   &trans &trans   &trans    &trans   &trans   &trans
   &trans &trans &trans &trans &trans &trans   &trans &trans   &trans    &trans   &trans   &trans
   &trans &trans &trans &trans &trans &trans   &trans &sk RCTL &sk RSHFT &sk RGUI &sk RALT &trans
                        &trans &trans &trans   &trans &trans   &trans
                        >;
                };
                mod {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                          	        &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };
        };
};
