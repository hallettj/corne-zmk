/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF_LAYER     0
#define ALPHA_MODS    1
#define GAMING        2
#define QWERTY_GAMING 3
#define EXTEND        4
#define GAMING_EXTEND 5
#define SYMBOL        6
#define KEYPAD        7
#define F_KEYS        8
#define CONFIGURE     9

/ {
    behaviors {
        hm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        skq: sticky_key_with_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };

        mlt: my_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "mlt";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        shift_caps: sticky_shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "sticky_shift_caps_word";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&skq LSHFT>, <&caps_word>;
        };

        conditional_layers {
            compatible = "zmk,conditional-layers";
            extend_and_symbol_activate_keypad {
               if-layers = <EXTEND SYMBOL>;
               then-layer = <KEYPAD>;
            };
            gaming_extend_with_gaming {
               if-layers = <EXTEND GAMING>;
               then-layer = <GAMING_EXTEND>;
            };
            gaming_extend_with_qwerty_gaming {
               if-layers = <EXTEND QWERTY_GAMING>;
               then-layer = <GAMING_EXTEND>;
            };
       };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &none &kp SQT  &kp COMMA  &kp DOT &kp P &kp Y   &kp F &kp G &kp C &kp R &kp L &none
   &none &kp A    &kp O      &kp E   &kp U &kp I   &kp D &kp H &kp T &kp N &kp S &none
   &none &kp SEMI &kp Q      &kp J   &kp K &kp X   &kp B &kp M &kp W &kp V &kp Z &none
                    &none  &kp SPACE  &mo EXTEND   &shift_caps  &sl SYMBOL  &none
                        >;
                };
                alpha_mods {
                        bindings = <
   &trans &trans        &trans     &trans      &trans      &trans   &trans &trans      &trans      &trans     &trans     &trans
   &trans &trans        &trans     &trans      &trans      &trans   &trans &trans      &trans      &trans     &trans     &trans
   &trans &hm LALT SEMI &hm LGUI Q &hm LSHFT J &hm LCTRL K &trans   &trans &hm RCTRL M &hm RSHFT W &hm RGUI V &hm RALT Z &none
                                             &trans &trans &trans   &trans &trans &trans
                        >;
                };
                gaming {
                        bindings = <
   &kp TAB   &trans   &trans &trans &trans &trans   &trans &trans &trans &trans &trans &trans
   &kp LCTRL &trans   &trans &trans &trans &trans   &trans &trans &trans &trans &trans &trans
   &kp LSHFT &kp SEMI &kp Q  &kp J  &kp K  &trans   &trans &trans &trans &trans &trans &trans
                    &kp BKSP &kp SPACE &mo EXTEND   &trans &trans &trans
                        >;
                };
                qwerty_gaming {
                        bindings = <
   &kp TAB   &trans   &kp Q &kp W &kp E  &kp R   &trans &trans &trans &trans &trans &trans
   &kp LCTRL &trans   &kp A &kp S &kp D  &kp F   &trans &trans &trans &trans &trans &trans
   &kp LSHFT &kp SEMI &kp Z &kp X &kp C  &kp V   &trans &trans &trans &trans &trans &trans
                 &kp BKSP &kp SPACE &mo EXTEND   &trans &trans &trans
                        >;
                };
                extend {
                        bindings = <
   &trans &kp C_PLAY_PAUSE &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT   &kp PG_UP &kp HOME &kp UP    &kp END   &kp INS  &trans
   &trans &key_repeat      &caps_word &kp TAB      &kp ESC      &trans       &kp PG_DN &kp LEFT &kp DOWN  &kp RIGHT &kp BKSP &trans
   &trans &sk LALT         &sk LGUI   &sk LSHFT    &sk LCTRL    &trans       &trans    &trans   &trans    &kp LGUI  &kp DEL  &trans
                                             &mo CONFIGURE  &trans  &trans   &kp ENTER &trans  &trans
                        >;
                };
// Override left side of extend layer. Gaming_extend is active when both gaming
// and extend are active. The idea is to have more keys to bind in games. But
// the movement movement keys, dot, o, e, and u, are kept the same as in the
// default layer.
                gaming_extend {
                        bindings = <
   &kp ESC   &kp L  &kp R  &kp DOT  &kp G  &kp F    &trans &trans &trans &trans &trans &trans
   &kp MINUS &kp S  &kp O  &kp E    &kp U  &kp D    &trans &trans &trans &trans &trans &trans
   &kp GRAVE &kp N1 &kp N2 &kp N3   &kp N4 &kp N5   &trans &trans &trans &trans &trans &trans
                             &trans &trans &trans   &trans &trans &trans
                        >;
                };
                symbol {
                        bindings = <
   &trans &kp EXCL  &kp AT   &kp LBKT &kp RBKT &none       &kp CARET &kp UNDER &kp QMARK &kp ASTRK &kp AMPS &trans
   &trans &kp GRAVE &kp DLLR &kp LPAR &kp RPAR &kp PRCNT   &kp BSLH  &kp MINUS &kp FSLH  &kp EQUAL &kp PLUS &trans
   &trans &kp TILDE &kp HASH &kp LBRC &kp RBRC &none       &kp PIPE  &sk RCTL  &sk RSHFT &sk RGUI  &sk RALT &mo CONFIGURE
                                  &trans  &trans  &trans   &trans  &trans  &trans
                        >;
                };
                keypad {
                        bindings = <
   &trans &trans    &trans     &kp DOT   &trans    &trans   &trans &kp N7 &kp N8 &kp N9 &trans &trans
   &trans &kp K_APP &mo F_KEYS &trans    &trans    &trans   &trans &kp N4 &kp N5 &kp N6 &kp N0 &trans
   &trans &sk LALT  &sk LGUI   &sk LSHFT &sk LCTRL &trans   &trans &kp N1 &kp N2 &kp N3 &trans &trans
                            &mo CONFIGURE  &trans  &trans   &trans &trans &trans
                        >;
                };
                f_keys {
                        bindings = <
   &trans &trans &trans &trans &trans &trans   &trans &kp F7 &kp F8 &kp F9 &kp F12 &trans
   &trans &trans &trans &trans &trans &trans   &trans &kp F4 &kp F5 &kp F6 &kp F10 &trans
   &trans &trans &trans &trans &trans &trans   &trans &kp F1 &kp F2 &kp F3 &kp F11 &trans
                        &trans &trans &trans   &trans &trans &trans
                        >;
                };
                configure {
                        bindings = <
   &bt BT_CLR &bt BT_SEL 0  &bt BT_SEL 1       &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &none         &to GAMING &none &none &tog ALPHA_MODS &none
   &none      &to DEF_LAYER &to GAMING         &none        &out OUT_USB &out OUT_BLE   &to DEF_LAYER &none      &none &none &none           &none
   &none      &none         &to QWERTY_GAMING  &none        &none        &none          &out OUT_BLE  &none      &none &none &none           &none
                                               &none        &none        &none          &none         &none      &none
                        >;
                };
        };
};
